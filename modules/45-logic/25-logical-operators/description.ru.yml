---

name: Логические операторы
theory: |

  Мы уже умеем писать функции которые проверяют одиночные условия. Теперь пришла познакомиться с тем как строить составные условия. Хорошим примером может служить задача проверки корректности ввода пароля. Как вы знаете, некоторые сервисы, при регистрации, хотят пароль соответствующий определенным условиям. Одним из таких условий может быть требование длины от 8 до 20 символов. Честно говоря, ограничение сверху это странно, но что поделать.

  В математике мы бы написали `8 < x < 20` и были бы правы, но в php такой трюк не пройдет (хотя есть языки, в которых пройдет). Составление условия корректности пароля, требует от нас написания двух отдельных логических выражений соединенных специальным оператором означающим "и".

  ```php
  <?php

  function isCorrectFunction($password)
  {
      return $password > 8 && $password < 20;
  }

  isCorrectFunction('qwerty'); // => false
  ```

  `&&` - означает "и" (конъюнкция с точки зрения логики). При использовании конъюнкции все выражение считается истинным только если истинен каждый операнд. Приоритет этого оператора ниже чем операторов сравнения, поэтому выражение отрабатывает правильно без скобок. Кроме `&&`, часто, используется оператор `||` (или, дизъюнкция с точки зрения логики). Их можно комбинировать между собой в любом количестве и любой последовательности, но когда одновременно встречаются `&&` и `||` то приоритет лучше задавать скобками. Попробуем реализовать функцию, проверяющую год на високосность. Напомню что год считается високосным если он кратен 400 или он одновременно кратен 4 и не кратен 100. Как видите в определении уже заложена вся необходимая логика, осталось только переложить ее на код:

  ```php
  <?php

  function isLeapYear($year)
  {
      return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
  }
  ```

  Обратите внимание на то что выражения в примере выше, могут принимать следующий вид:

  * `(true && true) || true`
  * `(false && false) || false`
  * `(false && true) || true`
  * `(true && false) || false`
  * `(true && true) || false`
  * `(false && true) || false`

  Для правильного вычисления описанных выражений, необходимо знать булеву алгебру. Ее понимание сводится к запоминанию двух таблиц соответствий:

    | И     | true  | false |
    | ----- | ----- | ----- |
    | true  | true  | false |
    | false | false | false |

    | ИЛИ   | true  | false |
    | ----- | ----- | ----- |
    | true  | true  | true  |
    | false | true  | false |

instructions: |

  Джон поручил Сэму реализовать автоматическое распознавание солдат Ланнистеров на видео. Идея автоматизировать дозор крепости казалась ему привлекательной. В процессе работы Сэму понадобилось написать функцию, которая определяет Ланнистер ли перед ним или нет. Немного подумав, Сэм выделил следующие правила по которым можно определить Ланнистера:

  Если у солдата есть щит и на нем изображен лев
  или если у солдата нет щита и доспехи красного цвета
  то это Ланнистер

  Реализуйте функцию `isLannisterSoldier`, которая принимает на вход:

  * Цвет доспехов как строчка. Если они красные, то передается _red_.
  * Название изображения на щите. В случае Льва - _lion_. В случа если щита нет, то передается `null`.

tips:
  - |
    [Булева алгебра](https://ru.wikipedia.org/wiki/%D0%91%D1%83%D0%BB%D0%B5%D0%B2%D0%B0_%D0%B0%D0%BB%D0%B3%D0%B5%D0%B1%D1%80%D0%B0)
  - |
    [Коньюнкция](https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%BD%D1%8A%D1%8E%D0%BD%D0%BA%D1%86%D0%B8%D1%8F)
  - |
    [Дизьюнкция](https://ru.wikipedia.org/wiki/%D0%94%D0%B8%D0%B7%D1%8A%D1%8E%D0%BD%D0%BA%D1%86%D0%B8%D1%8F)

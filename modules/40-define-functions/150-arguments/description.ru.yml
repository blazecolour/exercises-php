---

name: Аргументы
theory: |

  ```php
  <?php

  function sayMotto()
  {
      print_r('Moto: We Do Not Sow');
  }
  ```

  Функция `sayMotto`, с точки зрения практического применения, несет мало пользы. Текущая реализация не позволяет менять `motto`, а это значит что придется писать новую функцию на каждый новый девиз. Попробуем ее обобщить для работы со всеми девизами используя возможность передачи аргументов:

  ```php
  <?php

  function sayMotto($motto)
  {
      print_r("Motto: {$motto}");
  }
  ```

  Вызов:

  ```php
  <?php

  sayMotto('Winter is coming')
  // => Motto: Winter is coming
  ```

  Чисто синтаксически описание аргументов в определении функции, ничем не отличается от описания аргументов при вызове функции. Фактически нам нужно перечислить список входных параметров через запятую внутри круглых скобок. Вот пример с двумя параметрами:

  ```php
  <?php

  function sayMotto($motto, $prefix)
  {
      print_r("{$prefix}: {$motto}");
  }
  ```

  Вызов:

  ```php
  <?php

  sayMotto('Winter is coming', 'Motto');
  // => Motto: Winter is coming
  ```

  Количество аргументов может быть любым, главное чтобы у каждого аргумента было свое имя. И не забывайте про их позиционность. Порядок определения и передачи важен.

  Есть одна особенность в определении функции, которую новички часто не улавливают, а именно то что в определении функции, в качестве аргументов могут быть только переменные. Вот какой код я нередко наблюдаю у тех кто только учится писать код:

  ```php
  <?php

  function sayMotto('Winter is coming')
  {
      // тут может быть любой код
  }
  ```

  Вместо переменной, в определении функции использован литерал строки. Такой код упадет с синтаксической ошибкой. Если хорошо над ним подумать, то должно стать очевидно что такая запись бесмысленна. Аргумент на то и аргумент, что он может быть разный. С помощью аргументов мы говорим вызывающему коду что он может вызывать нашу функцию для разных данных. А если у нас есть конкретные данные, которые мы не хотим давать менять, то их нужно просто использовать, без затрагивания аргументов.

instructions: |

  Сэму для отрисовки карт, понадобилась функция, которая печатает на экран непрерывные последовательности произвольных символов. Например `+++++`, `__)__)__)` или `___________`. Он хотел бы чтобы он мог выбирать набор символов для повторения и количество повторений. Тирион взялся решить эту задачу, но функция, которую он сделал, выводит последовательность только один раз. Помогите Тириону правильно реализовать функцию `printSeq`, которая печатает нужную последовательность с нужным числом повторений.

  Для повторений используйте функцию `str_repeat` которая принимает на вход последовательность первым аргументом и количество повторений вторым.



tips: []

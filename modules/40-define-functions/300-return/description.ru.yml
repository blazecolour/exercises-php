---

name: Возврат значений
theory: |

  В модуле "вызов функций" мы, в основном, работали с функциями которые возвращают результат, а не выводят его на экран. Честно говоря, вывод на экран - фактически обучающий элемент. В реальном коде на экран никто не выводит (за исключением cli утилит). Функции возвращают данные, которые потребляют другие функции. Возврат данных из функции, самый первый шаг на пути к построению программ, делающих что-то полезное и осмысленное. Начнем с тривиального примера, повторяющего операцию вычитания чисел.

  ```php
  <?php

  function sub($a, $b)
  {
    $result = $a + $b;
    return $result;
  }
  ```

  Вызов:

  ```php
  <?php

  print_r(sub(10, 7)); // => 3
  ```

  Возврат осуществляется с помощью специальной инструкции `return`. Справа от нее описывается возвращаемое значение. Обратите внимание на то что `return` является инструкцией. Его нельзя использовать внутри выражений. А вот что касается записи справа от `return`, то тут все наоборот, раз мы там оперируем значениями, то автоматически можно сделать вывод о том что туда подходит любое выражение. Другими словами, мы можем описывать вычисления сразу после `return` без создания промежуточных переменных:

  ```php
  <?php

  function sub($a, $b)
  {
    return $a + $b;
  }
  ```

  Сам по себе `return` никак не участвует в вычислениях. Интерпретатор встречая эту инструкцию, останавливает дальнейшее выполнение функции и возвращает переданное ей значение в место вызова исходной функции. Посмотрите на этот код:

  ```php
  <?php

  function foo()
  {
    return 7;
    return 10;
  }
  ```

  Во-первых это валидный код на PHP, который работает. Во-вторых, какое значение он вернет? Исходя из сказанного выше, несложно сделать вывод что вернется число 7, так как интерпретатор наткнувшись на первый `return` остановит выполнение функции.


instructions: |

  Работая над программой для построения генеалогического дерева, Сэм увидел что ему постоянно приходится рассчитывать количество места занимаемое именами родителей на экране, для того чтобы правильно отображать элементы. И если имена слишком длинные, то переносить их на другие строки. Он подумал что неплохо бы выделить это действие в функцию `getParentNamesTotalLength`.

  Реализуйте соответствующую функцию. Она принимает единственный аргумент - имя ребенка, а возвращает количество символов в именах матери и отца.

  * Получение имени матери `parentFor($child, 'mother')`
  * Получение имени отца `parentFor($child, 'father')`
  * Подсчет длины строки: `strlen($str)`



tips: []

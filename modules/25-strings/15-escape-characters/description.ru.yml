---

name: Эскейп последовательности
theory: |

  Кроме обычных символов, строки нередко содержат специальные, невидимые символы, они называются управляющие (escape characters). Вспомните любую ситуацию, в которой вам приходилось набирать много текста. Когда заканчивался абзац, вы нажимали Enter для отделения одного блока текста от другого. И в этот самый момент в тексте появлялся невидимый символ, который называется LINE FEED (перевод строки). В некоторых редакторах можно даже включить отображение невидимых символов. Если его включить, то перенос строки будет выглядеть примерно так: `¶`. Цель таких символов исключительно управляющая. Устройство, которое выводит соответствующий текст, делает то, что задумано этим символом. Например принтер, при встрече с LF, протаскивает бумагу вверх на одну строку, а текстовый редактор переносит весь последующий текст ниже, также на одну строку.

  Хотя таких символов не один десяток, по факту в программировании часто встречаются всего несколько. Кроме перевода строки к таким символам относятся табуляция (разрыв получаемый после нажатия на кнопку tab) и возврат каретки (только в windows системах). Нам, как программистам, часто нужно использовать, например, перевод строки, для правильного форматирования текста. Сделать это довольно просто, используя специальный способ набора, а именно `\n`.

  ```php
  <?php

  print_r("dragon's\nmother");
  // dragon's
  // mother
  ```

  Программа выше напечатает _dragon's_ на одной строке, а _mother_ на другой.

  Обратите внимание на следующие моменты:

  * Не имеет значения, что стоит перед и/или после `\n` символ или пустая строка. Перевод будет обнаружен и выполнен.
  * Несмотря на то, что в исходном тексте программы эта последовательность выглядит как два символа, с точки зрения тех, кто текстом пользуется (выводящие устройства, среда выполнения кода), она представляет собой один символ.
  * Если нам понадобится вывести `\n` именно как текст (два отдельных печатных символа), то можно воспользоваться уже изветным нам способом эскейпинга, добавив еще один `\` в начале. То есть последовательность `\\n` отобразится как символы `\` и `n` идущие друг за другом.

  Также, здесь проявляются различия между строками в одинарных и двойных кавычках. В двойных управляющие символы работают так, как задумано, а вот внутри одиночных PHP рассматривает их как обычные символы, что бывает полезно для избавления от экранирования.

  ```php
  <?php

  print_r('dragon\'s\nmother');
  // dragon's\nmother
  ```

  Небольшое замечание про Windows. В Windows для перевода строк по умолчанию используется `\r\n`. Правильно настроить редактор так чтобы использовался Unix перевод, то есть только `\n`. Такое решение хорошо работает на обеих системах и не создает потенциальных проблем.

instructions: |

  Напишите программу, которая печатает строку, используя только один print_r:

      \tValar""
      \n' Morghulis

  Обратите внимание на то,что это уже печатный вариант в две строки, но напечатать

tips:
  - Обязательно поэкспериментируйте с выводом разных строк на сайте https://repl.it/languages/php

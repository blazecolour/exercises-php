---

name: Инкремент и Декремент
theory: |

  Из языка C в php перекочевали две операции, инкремент `++` и декремент `--`, которые очень часто встречаются вместе с циклами. Эти унарные операции прибавляют и уменьшают на единицу число записанное в переменную:

  ```php
  <?php

  $i = 0;
  $i++; // => 1
  $i++; // => 2

  $i--; // => 1
  $i--; // => 0
  ```

  Кроме постфиксной формы, у них есть и префиксная

  ```php
  <?php

  $i = 0;
  ++$i; // => 1
  ++$i; // => 2

  --$i; // => 1
  --$i; // => 0
  ```

  Кажется что результат один и тот же, но именно с этого момента, начинается по настоящему сложная история. Дело в том, что в отличие от всех остальных операций, которые не имеют побочных эффектов и просто возвращают новое значение, инкремент и декремент не только возвращают значение, но и изменяют значение внутри переменной. При использовании префиксной нотации, сначала происходит изменение переменной и только потом возврат, при использовании постфиксной наоборот. Правило работает одинаково как для инкремента так и для декремента. Для простоты я буду показывать только инкремент.

  ```php
  <?php

  $x = 5;
  print_r(++$x); // => 6
  print_r($x); // => 6

  // Пока все идет хорошо


  print_r($x++); // => 6
  print_r($x); // => 7

  // Упс
  ```

  Особенно страшным все становится тогда, когда инкремент вставляют внутрь других операций: `$x = $i++ - 7 + --$h`. Понять такой код решительно невозможно и его написание должно рассматриваться как тяжкое преступление. Например в js, линтер сразу начинает ругаться когда видит использование инкремента и декремента. Ниже даны рекомендации по использованию:

  * В принципе никогда не мешайте в рамках одного выражения операции и функции без побочных эффектов с операциями и функциями обладающими побочными эффектами.
  * Используйте инкремент и декремент только там, где нет разницы между префиксным и постфиксным вариантом. На текущий момент вы знаете только один такой способ. Использование операции отдельно от всего, на своей собственной строчке в исходном коде.


instructions: |

  Реализуйте функцию `filterStr`, которая принимает на вход строку и символ, а возвращает новую строку, в которой удален переданный на вход символ во всех его позициях.

  Пример вызова:

  ```php
  <?php

  $str = 'If I look back I am lost';
  filterString($str, 'I'); // => f  look back am lost
  filterString($str, 'o'); // => If I lk back I am lst
  ```
  ```

tips: []
